geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
install.packages("ggplot2")
library(ggplot2)
help(ggplot)
# Generate some sample data, then compute mean and standard deviation
# in each group
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
?ggplot()
# Generate some sample data, then compute mean and standard deviation
# in each group
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
library(ggplot2)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
# R语言是shell命令
print("Hello World")
print("Hello World")
"Hello World"
cat ("Hello World")
print(
"Hello World"
)
print("Hello World")
"Hello World"
cat("Hello World",
"___")
print(
"Hello
World"
)
"Hello World"
cat("Hello World",
"___")
# install.packages("ggplot2")
"Hello World"
require(ggplot2)
help(ggplot)
?ggplot()
plot(1:10)
graphics.off()
1 + 1
2 - 1
1 + 1
2 - 1
2 * 2
2 / 2
2 * 2
21 %% 5
20 %% 5
2 ^ 5
log(32, 2)
log(100, 10)
pi
e
exp(2)
exp(1)
log(100, exp(1))
exp(1)
1 > 2
1 >= 2
21 %% 5
(21 %% 5) == 0
(21 %% 5) != 0
(21 %% 5) == 0 & (21 %% 5) != 0
(21 %% 5) == 0 || (21 %% 5) != 0
(21 %% 5) == 0 || 1 > 2
TRUE
FALSE
TRUE & FALSE
T & F
abs(-1, 1)
abs(-1)
abs(-1.1)
sqrt(2)
log(2, 1.414)
round(sqrt(2), 2)
sqrt(2)
round(sqrt(2), 2)
round(pi, 3)
e
1 + 1
1+ 1
5 / 3
21 %% 5
20 %% 5
2 ^ 5
log(32, 2)
2 > 1
1 >= 2
21 %% 5 == 1
21 %% 5 == 0
21 %% 5 != 0
2 > 1 & 21 %% 5 == 1
(2 > 1) & (21 %% 5 == 1)
(2 > 1) &
(21 %% 5 == 1)
(2 < 1) & (21 %% 5 == 1)
(2 < 1) || (21 %% 5 == 1)
(2 < 1) || (21 %% 5 != 1)
TRUE
FALSE
TRUE & FALSE
TRUE + FALSE
TRUE * FALSE
T & F
abs(-1)
abs(-1.123123)
sqrt(2)
log(2, sqrt(2))
log(2, 1.414)
sqrt(2)
pi
e
exp(2)
exp(3)
exp(2^5)
exp(1)
round(pi, 2)
pi
round(pi, 3)
?arrary
??array
?array
array(1:3, c(2,4))
c(1, 2, 3, 4, 1, 0, 1)
c(1, 2, 3, 4, 1, 0, 1)
c(T, F, T, F, T, F, F)
c('T', 'F', 'T', 'F', 'T', 'F', 'F')
my_vector <- c(1, 2, 3, 4, 1, 0, 1)
names(my_vector)
c(
"A", "B", "C",
"D", "E", "F", "G"
)
name_temp <- c(
"A", "B", "C",
"D", "E", "F", "G"
)
names(my_vector)
names(my_vector) <- name_temp
names(my_vector)
my_vector
length(my_vector)
my_vector[2]
my_vector[-1]
my_vector[-2]
my_vector[length(my_vector)]
my_vector + 1
my_vector * 5
my_vector[c(2, 3)]
my_vector >= 3
temp_vec <- (my_vector >= 3)
temp_vec
my_vector[c(T,T,T,T,T,T,T)]
my_vector[c(T,T,T,F,T,T,T)]
my_vector[my_vector >= 3]
sum(my_vector)
mean(my_vector)
sum(my_vector)/length(my_vector)
median(my_vector)
my_vector
my_vector
median(my_vector)
?median
median(c(my_vector, 5, 6))
my_vector <- c(1, 2, 3, 4, 1, 0, 1)
my_vector <- c(1, 2, 3, 4, 1, 0, 1)
my_vector <- c(my_vector, 5, 6, 7, 8)
median(my_vector)
var(my_vector)
my_vector
mean(my_vector)
my_vector - mean(my_vector)
(my_vector - mean(my_vector))^2
sum((my_vector - mean(my_vector))^2)
(length(my_vector) - 1)
var(my_vector)
sum((my_vector - mean(my_vector))^2)/(length(my_vector) - 1)
sqrt(var(my_vector))
sd(my_vector)
a <- my_vector
b <- my_vector
c(a, b)
c <- c(a, b, 0, 5, 6)
sort(c)
rep(0, 8)
rep(c(2,3,3), 5)
rep(rep(c(2,3,3), 5), 3)
seq(from = 1, to = 100, by = 2)
length(seq(from = 1, to = 100, by = 2))
length(seq(from = 2, to = 100, by = 2))
seq(from = 2, to = 100, by = 2)
rep(c(2, 3, 3), times = 2, each = 2)
rep(c(2, 3, 3), times = 3, each = 2)
matrix(c(
1, 2, 3,
4, 5, 6),
ncol = 3, byrow = F)
my_matrix <- matrix(c(
1, 2, 3,
4, 5, 6),
ncol = 3, byrow = F)
my_vector <- c(1, 2, 3, 4, 1, 0, 1)
my_vector + 1
my_vector
my_vector + 1
my_matrix <- matrix(c(
1, 2, 3,
4, 5, 6),
ncol = 3, byrow = F)
my_matrix
my_matrix <- matrix(c(
1, 2, 3,
4, 5, 6),
nrow = 3, byrow = F)
my_matrix
my_matrix <- matrix(c(
1, 2, 3,
4, 5),
nrow = 3, byrow = F, ncol = 2)
my_matrix <- matrix(c(
1, 2, 3,
4, 5, 6),
nrow = 3, byrow = F)
my_matrix
my_matrix <- matrix(c(
1, 2, 3,
4, 5, 6),
nrow = 3, byrow = T)
my_matrix
names(my_matrix)
names(my_matrix) <- rep("666", 2)
my_matrix
names(my_matrix) <- rep("666", 6)
my_matrix
my_matrix[1,2]
my_matrix[c(2, 3), 2]
my_matrix[, 2]
my_matrix[c(2, 3),]
my_matrix[,]
my_matrix + 1
my_matrix  <- my_matrix + 1
my_vec <- c(1, 3, 4, 3, 3, 3, 2, 2, 1)
my_factor <- factor(my_vec)
my_vec
my_factor
levels(my_factor)
levels(my_factor)
levels(my_factor) <- c("木耳", "葡萄", "香蕉", "馒头")
my_factor
relevel(my_factor, ref = "木耳")
my_factor <- relevel(my_factor, ref = "木耳")
summary(my_factor)
####~~~生成列表####
my_list <- list("Hello", c(1, 2, 3), data.frame(PlantGrowth$weight, PlantGrowth$group))
my_list
c(1, 2, 3)
1:100
my_list
my_list[[1]]
my_list[[2]]
names(my_list)
names(my_list) <- c("a", "b", "c")
my_list
data.frame(PlantGrowth$weight, PlantGrowth$group)
my_list$c$PlantGrowth.weight[1]
sd(c(2.2))
sd(c(2.2, 3), na.rm = T)
sd(c(2.2, 3, NA), na.rm = T)
mean(c(2.2, 3, NA), na.rm = T)
mean(c(2.2, NA), na.rm = T)
mean(c(NA), na.rm = T)
is.na(mean(c(NA), na.rm = T))
?apply(array, margin, ...)
win<- data.frame()
win[,2] <- 1
my_df <- PlantGrowth
dim(my_df)
my_dim <- function(){
return(c(30, 2))
}
my_dim()
my_dim <- function(){
a <- 30
b <- 2
result <- c(a, b)
return(result)
}
my_dim()
my_dim <- function(){
a <- 30
b <- 3
result <- c(a, b)
return(result)
}
my_dim()
qiuhe <- function(a, b){
return(a + b)
}
qiuhe(3, 5)
c <- qiuhe(3, 5)
c
qiuhe()
qiuhe <- function(a = 0, b = 0){
return(a + b)
}
qiuhe()
qiuhe(a <- 0, b <- 0)
qiuhe(a = 1, b = 1)
qiuhe(b = 1)
qiuhe(1, 2)
qiuhe <- function(a = 0, b = 0){
return(
list(paste("主人，您让我计算的", a,
" + ", b, "已经计算好了，结果是",
a + b, "。", sep = ""),
a + b)
)
}
qiuhe(a = 1, b = 1)
c <- qiuhe(a = 1, b = 1)
c[[1]]
c[[2]]
data.frame(c(0, 0), c(0, 0))
my_df <- PlantGrowth
my_df[1,]
length(my_df[1,])
class(my_df[1,])
legth(my_df)
length(my_df)
my_dim <- function(data_frame = data.frame()){
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim()
my_dim(my_df)
data.frame <- my_df
data_frame <- my_df
data_frame
rows <- length(data.frame[,1])
rows
length(data.frame)
columns <- length(data.frame)
c(rows, columns)
my_dim <- function(data_frame){
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim(my_df)
my_dim()
my_dim2 <- function(data_frame){
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim2()
data_frame <- my_df
my_dim2(my_df)
my_dim2()
my_dim2 <- function(data_frame){
rows <- NA
columns <- NA
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim2()
my_dim2 <- function(data_frame = data.frame(c(NA), c(NA))){
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim2()
my_dim2 <- function(data_frame = data.frame(c(NA), c(NA))){
rows <- length(data.frame[,1])
columns <- length(data.frame)
return(c(rows, columns))
}
my_dim2()
my_dim2 <- function(data_frame = data.frame(c(NA), c(NA))){
rows <- length(data_frame[,1])
columns <- length(data_frame)
return(c(rows, columns))
}
my_dim2()
my_dim2 <- function(data_frame = data.frame()){
rows <- length(data_frame[,1])
columns <- length(data_frame)
return(c(rows, columns))
}
my_dim2()
my_dim2(my_df)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
setwd("D:\\git_file\\bp_record\\")
source("bp_record.R")
# addbp(103,64,97,60,66,62)
addbp(102,65,101,63,74,75)
